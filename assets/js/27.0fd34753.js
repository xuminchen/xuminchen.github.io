(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{390:function(t,s,a){"use strict";a.r(s);var i=a(42),m=Object(i.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"hnsw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hnsw"}},[t._v("#")]),t._v(" HNSW")]),t._v(" "),a("p",[t._v("HNSW算法是为了能在庞大的数据集中，做高效率的相似度查找。")]),t._v(" "),a("p",[t._v("HNSW是由朴素查找法一步步演变过来的。")]),t._v(" "),a("h2",{attrs:{id:"朴素查找法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#朴素查找法"}},[t._v("#")]),t._v(" 朴素查找法")]),t._v(" "),a("p",[t._v("方法就是：将点连在一起构成一个图，从任意一点出发，查找友点中哪个与目标点最近，则选择哪个点作为下一跳的点。")]),t._v(" "),a("p",[t._v("但是有一些缺点：")]),t._v(" "),a("ol",[a("li",[t._v("无友点的点无法被查询到")]),t._v(" "),a("li",[t._v("最近的两个点之间无连线的话会影响查询效率")]),t._v(" "),a("li",[t._v("若有一个点有多个友点，重复计算")])]),t._v(" "),a("p",[t._v("因此，我们要求构图时每个点都要有友点，点与点之间都有连线，且要保证图中的线最少。因此，在NSW引入了德劳内法则。")]),t._v(" "),a("h2",{attrs:{id:"nsw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nsw"}},[t._v("#")]),t._v(" NSW")]),t._v(" "),a("p",[t._v("德劳内法则要求：")]),t._v(" "),a("ol",[a("li",[t._v("每个点都要有友点")]),t._v(" "),a("li",[t._v("相邻的点互为友点")]),t._v(" "),a("li",[t._v("图中连接数最少")])]),t._v(" "),a("p",[t._v("但是德劳内法则的构建时间复杂度很高，查找效率并不能保证最好（因为和初始点相关，若初始点选的很差，那查找会比较慢），因此做了一些改进，引入了高速通道的思想。")]),t._v(" "),a("p",[t._v("方法如下：")]),t._v(" "),a("p",[t._v("向图中"),a("strong",[t._v("逐个随机")]),t._v("插入点，插入后，通过朴素查找法的搜索思路，找到最近的m个点，并将插入点与这m个点相连作为友点。")]),t._v(" "),a("h2",{attrs:{id:"hnsw-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hnsw-2"}},[t._v("#")]),t._v(" HNSW")]),t._v(" "),a("p",[t._v("HNSW是在NSW的基础上作了一些优化改进，提高查找效率。")]),t._v(" "),a("p",[t._v("首先是引入了"),a("strong",[t._v("跳表skip list")]),t._v("的结构，表层作高速通道，底层作精细查找。")]),t._v(" "),a("p",[t._v("查找时，先计算当前点可以深入到第几层，计算公式："),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("mi",[t._v("f")]),a("mi",[t._v("l")]),a("mi",[t._v("o")]),a("mi",[t._v("o")]),a("mi",[t._v("r")]),a("mo",[t._v("(")]),a("mo",[t._v("−")]),a("mi",[t._v("ln")]),a("mo",[t._v("(")]),a("mi",[t._v("u")]),a("mi",[t._v("n")]),a("mi",[t._v("i")]),a("mi",[t._v("f")]),a("mi",[t._v("o")]),a("mi",[t._v("r")]),a("mi",[t._v("m")]),a("mo",[t._v("(")]),a("mn",[t._v("0")]),a("mo",{attrs:{separator:"true"}},[t._v(",")]),a("mn",[t._v("1")]),a("mo",[t._v(")")]),a("mo",[t._v(")")]),a("mo",[t._v("∗")]),a("mi",[t._v("m")]),a("mi",[t._v("l")]),a("mo",[t._v(")")])],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("floor(-\\ln(uniform(0,1))*ml)")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mord mathit"},[t._v("o")]),a("span",{staticClass:"mord mathit"},[t._v("o")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord"},[t._v("−")]),a("span",{staticClass:"mop"},[t._v("ln")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathit"},[t._v("u")]),a("span",{staticClass:"mord mathit"},[t._v("n")]),a("span",{staticClass:"mord mathit"},[t._v("i")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10764em"}},[t._v("f")]),a("span",{staticClass:"mord mathit"},[t._v("o")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("r")]),a("span",{staticClass:"mord mathit"},[t._v("m")]),a("span",{staticClass:"mopen"},[t._v("(")]),a("span",{staticClass:"mord mathrm"},[t._v("0")]),a("span",{staticClass:"mpunct"},[t._v(",")]),a("span",{staticClass:"mord mathrm"},[t._v("1")]),a("span",{staticClass:"mclose"},[t._v(")")]),a("span",{staticClass:"mclose"},[t._v(")")]),a("span",{staticClass:"mbin"},[t._v("∗")]),a("span",{staticClass:"mord mathit"},[t._v("m")]),a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.01968em"}},[t._v("l")]),a("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("，ml是标准化因子。自顶层向目标点的层数L进行逼近搜索，直到L+1层，每层寻找离当前点最近的一个点。自L层向底层逼近，每层寻找离目标点的层最近的K个点赋值到集合W。在W中选择与当前点最近的M个点作为友点相连。每个友点的连接数大于"),a("span",{staticClass:"katex"},[a("span",{staticClass:"katex-mathml"},[a("math",[a("semantics",[a("mrow",[a("msub",[a("mi",[t._v("M")]),a("mrow",[a("mi",[t._v("m")]),a("mi",[t._v("a")]),a("mi",[t._v("x")])],1)],1)],1),a("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("M_{max}")])],1)],1)],1),a("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[a("span",{staticClass:"strut",staticStyle:{height:"0.68333em"}}),a("span",{staticClass:"strut bottom",staticStyle:{height:"0.83333em","vertical-align":"-0.15em"}}),a("span",{staticClass:"base textstyle uncramped"},[a("span",{staticClass:"mord"},[a("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.10903em"}},[t._v("M")]),a("span",{staticClass:"vlist"},[a("span",{staticStyle:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.10903em"}},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),a("span",{staticClass:"reset-textstyle scriptstyle cramped"},[a("span",{staticClass:"mord scriptstyle cramped"},[a("span",{staticClass:"mord mathit"},[t._v("m")]),a("span",{staticClass:"mord mathit"},[t._v("a")]),a("span",{staticClass:"mord mathit"},[t._v("x")])])])]),a("span",{staticClass:"baseline-fix"},[a("span",{staticClass:"fontsize-ensurer reset-size5 size5"},[a("span",{staticStyle:{"font-size":"0em"}},[t._v("​")])]),t._v("​")])])])])])]),t._v("的话，则缩减友点（"),a("strong",[t._v("把最远的友点去掉")]),t._v("）。")])])}),[],!1,null,null,null);s.default=m.exports}}]);